# Single argument function calls
# Strings can use either ' or "
println 'Hello World'
print "HelloWorld\n"

# Logical operators
true or false # true
true and false # false
true and true # true
not false or false # true or false -> true

# Integers
-573
+23
32
-046 # Octal: 4*8 + 6 = 38
0x3A # Hexadecimal: 3*16 + 10 = 58
0b10011 # Binary: 16 + 2 + 1 = 19

# Float
3.5
3.5e2
3e-2
+3.5e2
-3.5e2
-3.5e-2


# Relational operators
1 == 1 # true
1 != 1 # false
1 >= 0 # true
1 <= 5 # true
1 > 1 # false
1 < 3 # true

# Arithmetic operators
x = 0
x -= 1 # -1
x *= 3 # -3
x /= 2 # -1.5
x **= 2 # 2.25
x %= 1.5 # 0.75
println x

5 + 2 # 7
5 - 2 # 3
5 * 2 # 10
5 / 2 # 2.5
5 // 2 # 2
5 ** 2 # 25

8 % 3 # 2
8.5 % 2.5 # Since 8.5 = 3 * 2.5 + 1, 8.5 % 2.5 = 1

# Binary operators
3 & 2 # 11 & 10 = 10 (2)
3 | 8 # 0011 | 1000 = 1011 (11)
5 ^ 3 # 101 ^ 011 = 110 (6)
~0 # 111111... (-1)
1 << 2 # 100 (4)
4 >> 1 # 10 (2)

z = 1
z <<= 2 # 100 (4)
z >>= 1 # 10 (2)
z &= 3 # 010 & 011 = 010 (2)
z |= 8 # 0010 | 1000 = 1010 (10)
z ^= 5 # 1010 ^ 0101 = 1111 (15)

# Multiple statements on one line
x = 1, x += 3, println x # 4

# Escape characters
println "' \"" # ' "
println '" \'' # " '

#{
  References

  Basic datatypes like Int and Char have their values copied by default
  when '=' is used. Maps, Strings and lists are referenced by default, and can be copied
  using the 'copy' function.
}
x = 8
a = !x
a = 5
println a # 5
println x # 5

# Lists
list = (1,2,3,4,5)
list:1 # 2
list:(1,3) # (2,3)
(1..5) # (1,2,3,4,5)
list2 = (true,17,'Hi') # Can store different types

#{
  Scopes:
  A scope is enclosed in square brackets
  , or \n separate each statement
}
[] # Empty scope

# 'a.b' is equivalent to 'b a'
# 'a.b c' is equivalent to 'b (a, c)'
# 'a.b (c,d)' is equivalent to 'b (a,c,d)', and so on

# Function
average = [
  #{
    The forEach function (dot notation)
    $:0 - The element currently being accessed
    $:1 - The index for the element currently being accessed
  }
  sum = 0
  $.forEach [sum += $:0]
  # The result of evaluating the last statement in a function is the return
  # value (unless of course the function returns before then)
  sum / size $
]

#{
  Since parentheses can be used to create a list and to change expression
  evaluation, a single list cannot be created like this: (3).

  Instead, it is necessary to add a comma: (3,).
}

# Functions can only take one argument, and so to accept more a list is required
println (average (3,8,5)) # (3 + 8 + 5) / 3 = 16 / 3 = 5.333...

# To call a function with no arguments, we can just type the name
sayHi = [println 'Hi']
sayHi
# To store a function in a variable, precede the function name with a !
x = !sayHi
x # Equivalent to calling sayHi

# Characters
print(`a)
print(`\n) # Newline character

pigLatin = [
  input = $:0
  input:0.anyOf (`a,`e,`i,`o,`u) ? [
    pop (outer, input + 'ay')
  ] ? [
    pop (outer, input:(1,) + input:0 + 'ay')
  ]
  @outer
]

println (pigLatin 'bucket') # ucketbay
println (pigLatin 'air') # airay

# The $ variable differs for each scope.
incrementArgs = [$.forEach [$:0 += 1]]
# To access an outer $ from an inner scope it is necessary to give it or its
# data a name
incrementArgsByFirstArg = [
  amount = $:0
  $:(1,).forEach [$:0 += amount]
  $:(1,)
]

println (incrementArgsByFirstArg (2,5,7,17)) # (7,9,19)

#{
  cond ? func # Returns false if func is executed, else false, so can be chained
  cond ? func1 ? func2

  Can create an 'else if' like this:
  cond1 ? cond1Func
    and cond2 ? cond2Func
    ? elseFunc

  Same behaviour works with ??
}

# min returns the minimum value of its two arguments
# ?? acts as ternary operator - returns second argument instead of calling it
min = [$:0 < $:1 ?? $:0 ?? $1]

println (min (3.6,2)) # 2

# Getting the name of an identifier (that may or may not be defined) as a String:
print /hello

x = 5

# Sets
data = {
  7 -> 'Hello'
  'Woop' -> true
  /data -> (7,2)
  x -> 6
}

# As some syntactic sugar we can map keys with valid identifier names (a and b)
# as follows
data2 = {
  a -> 7
  b -> 'Hi'
}

# We can also combine the two syntaxes
data3 = {
  a -> 7
  "test" -> true
}

println data:7 # Hello
println data2:(/a) # 7
println data2:'a' # 7
println data2:(/b) # Hi
println data3:(/test) # true

println (data2.has 'a') # true

# However, there is some syntactic sugar which means that the following two
# statements are equivalent
print data:(/a)
print data;a

#{
  Doing the following adds the 'c' member to 'data'
}
data.join {c -> true}

# OOP

# Create a constructor - function returning a Map
Person = [{
  /name -> $:0
  /age -> $:1
  /height -> $:2
}]

speak = [println ('Hi, I\'m ',$;name)]

jack = Person ('Jack',15,172)
println (speak jack)

# Inheritance
Mutant = [(Person $).concat {/power -> $:3}]
hulk = Mutant ('Hulk',25,378,'Strength')
println (speak hulk)

# Can also add functions to a Map, which can act as member functions or
# essentially a namespace equivalent
Fruit = [{
  /color -> $
  /sayColor -> [println ('I am ' + $;color)]
  /betterColor -> [println ($:0;color + ' is a better color than ' + $:1)]
  /tasty -> [true] # Function which does not take self or any argument
}]

apple = Fruit 'red'
# We can call apple's sayColor function like this:
apple;sayColor apple
# But we needed to repeat the name 'apple'. For convenience, using ';;' does the
# same thing - calls the function passing self.
apple;;sayColor
# The above statement could also be written as:
apple::(/sayColor)

# For functions which take more then one argument, using ';;' just calls the
# function with self and any other arguments in a list
apple;;betterColor 'orange'
# Is equivalent to
apple;betterColor (apple,'orange')

# To reference the function, just do this, but when calling x we need to provide
# apple
x = !apple;sayColor
x apple
# To avoid having to pass apple, we can just create a short function like this
x = [apple;;sayColor]

# Example of a 'namespace'
namespace = {
  /constant -> 7
  /foo -> [print 1]
}

println (namespace;constant) # 7
namespace;foo # 1

# Reference semantics with a list
a = (1,2,3)
b = a # 'b' holds a reference to 'a'
b:1 = 5 # Since 'b' references 'a', both 'a' and 'b' are now (1,5,3)
# Both print '(1,5,3)'
println a
println b

# Same but with copying
a = (1,2,3)
b = copy(a) # 'b' is a copy of 'a'
b:1 = 5 # 'b' is now (1,5,3), 'a' is unchanged
println a # Prints '(1,2,3)'
println b # Prints '(1,5,3)'

# Using makeScope to interpret a string into a scope
scope = makeScope "println 'This was from a string'"
# Displays the AST for the scope. This can also be done with other functions
println !scope
println [3 * 2] # Displays AST for code '3 * 2'
scope # Runs the code

# Can create a list of tokens also
tokens = tokenize "3 * (4 - 2) + 1"
println tokens
# Can also create a scope from a list of tokens
mathScope = makeScope tokens
println !mathScope # Displays AST
println mathScope # Prints 7

#{
  Using 'is'

  The following types can be used with 'is':
  - Int
  - Float
  - Bool
  - Char
  - String
  - List
  - Map
  - None
  - Scope
}
a = 7
println (a is /Int) # true
a = 'Hello'
println (a is /String) # true
a = true
println (a is /Float) # false

a = None
println (a is /None) # true
println (a == None) # true

#{
  Custom operators

  They are defined inside parentheses and always take two arguments.
}
(++) = [$:0 + 2 * $:1]
println (7 ++ 2) # 7 + 2 * 2 = 11

#{
  Overriding operators for Maps.

  For binary operators:
    When a Map is the left operand of an expression, the Map is indexed with the
    operator as a String (e.g. "+"). The mapped value should be a function, and
    if it isn't, an exception is thrown. The mapped function is called with the
    Map and the right operand (which doesn't need to be a Map).

  For unary operators:
    Similarly to the case with binary operators, the Map is indexed with the
    operator's corresponding String, and then called with the Map as it's
    argument.

  For both operator types the arguments may be modified, although this may not
  be a very good design choice.

  Note that automatically overloading an operator such as '+' does not mean '+='
  can now be used with the type. To avoid repetition it is possible to implement
  one in terms of the other (as seen in the example of Vector2).

  Some operators are reserved for Maps, and cannot be overloaded, such as the
  indexing (and reflexive indexing) operations.
}
Vector2 = [{
  /x -> $:0
  /y -> $:1

  # Note that this example would crash if the unary plus operator were to be used
  # on this Map, since $ would be a Map and not a List
  '+' -> [Vector2 ($:0;x + $:1;x, $:0;y + $:1;y)]
  '+=' -> [$:0 = $:0 + $:1]
}]

sum = Vector2 (1, 3) + Vector2 (7, 4)
println (sum;x, ',', sum;y) # 8,7

Vector3 = [{
  /x -> $:0
  /y -> $:1
  /z -> $:2

  '+' -> [Vector3 ($:0;x + $:1;x, $:0;y + $:1;y, $:0;z + $:1;z)]
}]

# Since the left Map's '+' member is used for the addition,
# sum is a Vector2. Switching the order of Vector2 and Vector3 in the addition
# expression would be an error because the Vector3's '+' member would be used,
# expecting a 'z' member in the Vector2 operand which is not present.
sum = Vector2 (2, 4) + Vector3 (6, 5, 19)
println (sum;x, ',', sum;y) # 8,9

# Casting. Bool, string and other type names are just functions which convert
# the given value to that type
a = String `a # a == "a"
